plugins {
    id("fabric-loom")
    id 'maven-publish'
}

version = "${property("mod_version")}+${stonecutter.current.version}"
group = project.maven_group

loom {
    runConfigs.all {
        ideConfigGenerated(true) // Run configurations are not created for subprojects by default
        runDir = "../../run" // Use a shared run folder and create separate worlds
    }
}

base {
    archivesName = project.archives_base_name
}

stonecutter {

}

repositories {
    maven { url 'https://maven.tomalbrc.de' }
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://maven.parchmentmc.org' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings(loom.layered {
        officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}")
    })
    modImplementation "net.fabricmc:fabric-loader:${property('fabric_loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"

    // Polymer
    modImplementation ("eu.pb4:polymer-core:${property('polymer_version')}")
    modImplementation ("eu.pb4:polymer-blocks:${property('polymer_version')}")
    modImplementation ("eu.pb4:polymer-resource-pack:${property('polymer_version')}")
    modImplementation ("eu.pb4:polymer-networking:${property('polymer_version')}")

    modImplementation ("de.tomalbrc:filament:${property('filament_version')}")

    modImplementation ("eu.pb4:placeholder-api:${property('papi_version')}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}